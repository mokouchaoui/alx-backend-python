# ~/Documents/Github/alx-backend-python/messaging_app/docker-compose.yml
version: '3.8'

services:
  db:
    image: mysql:8.0 # Using MySQL version 8.0
    container_name: mysql_db_container
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3307:3306" # Expose MySQL on host port 3307 (optional, for external access)
    volumes:
      - mysql_data:/var/lib/mysql # Persist database data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$MYSQL_USER -p$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 180s # SIGNIFICANTLY INCREASED: Wait 3 minutes before marking as unhealthy
                          # (MySQL took almost 3 mins in your log)

  web:
    build: . # Build from the Dockerfile in the current directory
    container_name: django_web_container
    restart: unless-stopped
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             gunicorn messaging_app.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app # Mount current directory to /app in container for development
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_ENGINE=${DB_ENGINE}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - PYTHONUNBUFFERED=1 # Ensures Python output is sent straight to logs
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy before starting web
    networks:
      - app-network

volumes:
  mysql_data: # Define the named volume for data persistence

networks:
  app-network:
    driver: bridge